#!/usr/bin/env python

import requests

"""
Write a program that takes in list strings with billing info: action(CREATE, FINALIZE, PAY), id, amount, currency. Invoice can not be paid if it was finalized or created. It can not be finalized if it wasn't created. For all the invoices in USD, you have to return the total amount that is being owed (created + finalized).
"""

VALID_PREVIOUS_ACTIONS = {
  'CREATE': None,
  'FINALIZE': 'CREATE',
  'PAY': 'FINALIZE',
}

exchange_rates = None

def get_exchange_rates():
  response = requests.get("https://api.exchangeratesapi.io/latest?base=USD")
  return response.json().get('rates', {})

def owing(billing_strings):
  global exchange_rates
  if exchange_rates is None:
    exchange_rates = get_exchange_rates()

  id_to_current_action = {}
  id_to_balance = {}
  for billing_string in billing_strings:
    action, id_, amount, currency = billing_string.split(', ')
    amount = int(amount)
    if currency != 'USD':
      try:
        amount /= exchange_rates[currency]
      except KeyError:
        print('Unknown currency:', currency)
        continue
    previous_action = id_to_current_action.get(id_, None)
    if action not in VALID_PREVIOUS_ACTIONS or previous_action != VALID_PREVIOUS_ACTIONS.get(action):
      # invalid, skip
      continue
    id_to_current_action[id_] = action
    if action == 'FINALIZE':
      id_to_balance[id_] = amount
    elif action == 'PAY':
      assert id_ in id_to_balance
      id_to_balance[id_] -= amount
  
  return id_to_balance


# if __name__ == '__main__':
#   print(owing(["CREATE, 100, 100, USD"]))

billing_strings = [
  "CREATE, 100, 100, USD",
  "FINALIZE, 100, 100, USD",
  "PAY, 100, 100, USD",
  "CREATE, 10, 10, CAD",
  "FINALIZE, 10, 10, CAD",
]
print(owing(billing_strings))
